from typing import AsyncGenerator
from core.errors.database_exception import DatabaseException
from core.errors.face_exceptions import FaceRecognitionException
from models.login_model import LoginModel
from models.response_model import ResponseModel
from models.user_model import UserModel
from repository.database_repository import DatabaseRepository
from services.user_service import UserService
from services.face_service import FaceService


class UserController:
    def __init__(
        self, face_service: FaceService, database_repository: DatabaseRepository
    ):
        self.user_service = UserService(face_service, database_repository)
        self.face_service = face_service

    async def login(self, login_model: LoginModel):
        try:

            yield ResponseModel(status=False, error=False, log="Verificando Login")

            task = await self.user_service._login_user(login_model)

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="Erro no Login",
                    details=str(task.details),
                )

            yield task
            return

        except (Exception, ValueError) as e:
            yield ResponseModel(
                status=False,
                error=True,
                log="Erro ao processar login",
                details=str(e),
            )

            return

    async def register(
        self,
        user_model: UserModel,
        login_model: LoginModel,
    ) -> AsyncGenerator[ResponseModel, None]:
        try:
            yield ResponseModel(status=False, error=False, log="Iniciando Registro")

            # Etapa 1: Verificando ID
            task = await self.user_service._verify_user_with_id(login_model)
            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="Erro ao verificar ID",
                    details=str(task.details),
                )
                return

            if task.data is None or not task.data:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="ID n√£o Autorizado",
                    details=str(task.details),
                )
                return

            yield ResponseModel(status=False, error=False, log="ID Autorizado")

            # Etapa 2: Registrando usu√°rio com rosto
            self.face_service.create_face_model()
            encoding = self.face_service.face_model.encodings
            user_model.set_encoding(encoding)

            yield ResponseModel(
                status=False, error=False, log="Rosto Coletado com Sucesso"
            )
            yield ResponseModel(
                status=False, error=False, log="Adicionando novo usuario"
            )

            task = await self.user_service._insert_user(user_model)

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="Erro ao registrar usu√°rio",
                    details=str(task.details),
                )
                return

            yield ResponseModel(
                status=True, error=False, log="Usu√°rio registrado com sucesso"
            )

        except FaceRecognitionException as e:
            yield ResponseModel(
                status=True,
                error=True,
                log="Erro ao Coletar o Rosto",
                details=str(e),
            )

        except (Exception, ValueError) as e:
            yield ResponseModel(
                status=True,
                error=True,
                log="Erro ao processar registro",
                details=str(e),
            )

    async def load_data(
        self, login_model: LoginModel
    ) -> AsyncGenerator[ResponseModel, None]:
        try:
            yield ResponseModel(
                status=False, error=False, log="üîê Verificando permiss√£o de acesso"
            )

            # Verifica o ID do usu√°rio
            task = await self.user_service._verify_user_with_id(login_model)

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå Erro ao verificar ID",
                    details=str(task.details),
                )
                return

            if task.data is None or not task.data:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå ID n√£o autorizado",
                    details="ID inv√°lido ou sem permiss√£o",
                )
                return

            yield ResponseModel(status=False, error=False, log="‚úÖ Acesso autorizado")
            yield ResponseModel(
                status=False, error=False, log="üì• Carregando tabela de usu√°rios"
            )

            # Carrega os dados
            task = await self.user_service._load_users()

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå Erro ao carregar a tabela",
                    details=str(task.details),
                )
                return

            yield ResponseModel(
                status=True,
                error=False,
                log="‚úÖ Tabela carregada com sucesso",
                data=task.data,
            )

        except Exception as e:
            yield ResponseModel(
                status=True,
                error=True,
                log="‚ùå Erro inesperado ao carregar tabela",
                details=str(e),
            )

    async def update(
        self, login_model: LoginModel, user_model: UserModel, new_model: UserModel
    ) -> AsyncGenerator[ResponseModel, None]:
        try:
            yield ResponseModel(
                status=False, error=False, log="üîê Verificando permiss√£o de atualiza√ß√£o"
            )

            # Verifica o ID do usu√°rio atual (quem est√° tentando atualizar)
            task = await self.user_service._verify_user_with_id(login_model)

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå Erro ao verificar ID",
                    details=str(task.details),
                )
                return

            if task.data is None or not task.data:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå ID n√£o autorizado",
                    details="ID inv√°lido ou sem permiss√£o",
                )
                return

            yield ResponseModel(status=False, error=False, log="‚úÖ Acesso autorizado")
            yield ResponseModel(status=False, error=False, log="üîÑ Atualizando usu√°rio")

            # Executa atualiza√ß√£o
            task = await self.user_service._update_user(user_model, new_model)

            if task.error:
                yield ResponseModel(
                    status=True,
                    error=True,
                    log="‚ùå Erro ao atualizar o usu√°rio",
                    details=str(task.details),
                )
                return

            yield ResponseModel(
                status=True, error=False, log="‚úÖ Usu√°rio atualizado com sucesso"
            )

        except Exception as e:
            yield ResponseModel(
                status=True,
                error=True,
                log="‚ùå Erro inesperado ao atualizar usu√°rio",
                details=str(e),
            )
